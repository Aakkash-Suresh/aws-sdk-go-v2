// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AlarmCondition string

// Enum values for AlarmCondition
const (
	AlarmConditionRed   AlarmCondition = "red"
	AlarmConditionGreen AlarmCondition = "green"
)

// Values returns all known values for AlarmCondition. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AlarmCondition) Values() []AlarmCondition {
	return []AlarmCondition{
		"red",
		"green",
	}
}

type AlarmType string

// Enum values for AlarmType
const (
	AlarmTypeApplicationHealth AlarmType = "applicationHealth"
	AlarmTypeTrigger           AlarmType = "trigger"
)

// Values returns all known values for AlarmType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AlarmType) Values() []AlarmType {
	return []AlarmType{
		"applicationHealth",
		"trigger",
	}
}

type Approval string

// Enum values for Approval
const (
	ApprovalApprove Approval = "approve"
	ApprovalDecline Approval = "decline"
)

// Values returns all known values for Approval. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Approval) Values() []Approval {
	return []Approval{
		"approve",
		"decline",
	}
}

type Ec2AsgCapacityMonitoringApproach string

// Enum values for Ec2AsgCapacityMonitoringApproach
const (
	Ec2AsgCapacityMonitoringApproachSampledMaxInLast24Hours     Ec2AsgCapacityMonitoringApproach = "sampledMaxInLast24Hours"
	Ec2AsgCapacityMonitoringApproachAutoscalingMaxInLast24Hours Ec2AsgCapacityMonitoringApproach = "autoscalingMaxInLast24Hours"
)

// Values returns all known values for Ec2AsgCapacityMonitoringApproach. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2AsgCapacityMonitoringApproach) Values() []Ec2AsgCapacityMonitoringApproach {
	return []Ec2AsgCapacityMonitoringApproach{
		"sampledMaxInLast24Hours",
		"autoscalingMaxInLast24Hours",
	}
}

type EcsCapacityMonitoringApproach string

// Enum values for EcsCapacityMonitoringApproach
const (
	EcsCapacityMonitoringApproachSampledMaxInLast24Hours           EcsCapacityMonitoringApproach = "sampledMaxInLast24Hours"
	EcsCapacityMonitoringApproachContainerInsightsMaxInLast24Hours EcsCapacityMonitoringApproach = "containerInsightsMaxInLast24Hours"
)

// Values returns all known values for EcsCapacityMonitoringApproach. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcsCapacityMonitoringApproach) Values() []EcsCapacityMonitoringApproach {
	return []EcsCapacityMonitoringApproach{
		"sampledMaxInLast24Hours",
		"containerInsightsMaxInLast24Hours",
	}
}

type EksCapacityMonitoringApproach string

// Enum values for EksCapacityMonitoringApproach
const (
	EksCapacityMonitoringApproachSampledMaxInLast24Hours EksCapacityMonitoringApproach = "sampledMaxInLast24Hours"
)

// Values returns all known values for EksCapacityMonitoringApproach. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EksCapacityMonitoringApproach) Values() []EksCapacityMonitoringApproach {
	return []EksCapacityMonitoringApproach{
		"sampledMaxInLast24Hours",
	}
}

type EvaluationStatus string

// Enum values for EvaluationStatus
const (
	EvaluationStatusPassed            EvaluationStatus = "passed"
	EvaluationStatusActionRequired    EvaluationStatus = "actionRequired"
	EvaluationStatusPendingEvaluation EvaluationStatus = "pendingEvaluation"
	EvaluationStatusUnknown           EvaluationStatus = "unknown"
)

// Values returns all known values for EvaluationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EvaluationStatus) Values() []EvaluationStatus {
	return []EvaluationStatus{
		"passed",
		"actionRequired",
		"pendingEvaluation",
		"unknown",
	}
}

type ExecutionAction string

// Enum values for ExecutionAction
const (
	ExecutionActionActivate   ExecutionAction = "activate"
	ExecutionActionDeactivate ExecutionAction = "deactivate"
)

// Values returns all known values for ExecutionAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionAction) Values() []ExecutionAction {
	return []ExecutionAction{
		"activate",
		"deactivate",
	}
}

type ExecutionBlockType string

// Enum values for ExecutionBlockType
const (
	ExecutionBlockTypeCustomActionLambda ExecutionBlockType = "CustomActionLambda"
	ExecutionBlockTypeExecutionApproval  ExecutionBlockType = "ManualApproval"
	ExecutionBlockTypeAurora             ExecutionBlockType = "AuroraGlobalDatabase"
	ExecutionBlockTypeEc2Asg             ExecutionBlockType = "EC2AutoScaling"
	ExecutionBlockTypeRoutingControl     ExecutionBlockType = "ARCRoutingControl"
	ExecutionBlockTypeRegionSwitch       ExecutionBlockType = "ARCRegionSwitchPlan"
	ExecutionBlockTypeParallel           ExecutionBlockType = "Parallel"
	ExecutionBlockTypeEcs                ExecutionBlockType = "ECSServiceScaling"
	ExecutionBlockTypeEksResourceScaling ExecutionBlockType = "EKSResourceScaling"
	ExecutionBlockTypeRoute53HealthCheck ExecutionBlockType = "Route53HealthCheck"
)

// Values returns all known values for ExecutionBlockType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionBlockType) Values() []ExecutionBlockType {
	return []ExecutionBlockType{
		"CustomActionLambda",
		"ManualApproval",
		"AuroraGlobalDatabase",
		"EC2AutoScaling",
		"ARCRoutingControl",
		"ARCRegionSwitchPlan",
		"Parallel",
		"ECSServiceScaling",
		"EKSResourceScaling",
		"Route53HealthCheck",
	}
}

type ExecutionEventType string

// Enum values for ExecutionEventType
const (
	ExecutionEventTypeUnknown                                     ExecutionEventType = "unknown"
	ExecutionEventTypeExecutionPending                            ExecutionEventType = "executionPending"
	ExecutionEventTypeExecutionStarted                            ExecutionEventType = "executionStarted"
	ExecutionEventTypeExecutionSucceeded                          ExecutionEventType = "executionSucceeded"
	ExecutionEventTypeExecutionFailed                             ExecutionEventType = "executionFailed"
	ExecutionEventTypeExecutionPausing                            ExecutionEventType = "executionPausing"
	ExecutionEventTypeExecutionPaused                             ExecutionEventType = "executionPaused"
	ExecutionEventTypeExecutionCanceling                          ExecutionEventType = "executionCanceling"
	ExecutionEventTypeExecutionCanceled                           ExecutionEventType = "executionCanceled"
	ExecutionEventTypeExecutionPendingApproval                    ExecutionEventType = "executionPendingApproval"
	ExecutionEventTypeExecutionBehaviorChangedToUngraceful        ExecutionEventType = "executionBehaviorChangedToUngraceful"
	ExecutionEventTypeExecutionBehaviorChangedToGraceful          ExecutionEventType = "executionBehaviorChangedToGraceful"
	ExecutionEventTypeExecutionPendingChildPlanManualApproval     ExecutionEventType = "executionPendingChildPlanManualApproval"
	ExecutionEventTypeExecutionSuccessMonitoringApplicationHealth ExecutionEventType = "executionSuccessMonitoringApplicationHealth"
	ExecutionEventTypeStepStarted                                 ExecutionEventType = "stepStarted"
	ExecutionEventTypeStepUpdate                                  ExecutionEventType = "stepUpdate"
	ExecutionEventTypeStepSucceeded                               ExecutionEventType = "stepSucceeded"
	ExecutionEventTypeStepFailed                                  ExecutionEventType = "stepFailed"
	ExecutionEventTypeStepSkipped                                 ExecutionEventType = "stepSkipped"
	ExecutionEventTypeStepPausedByError                           ExecutionEventType = "stepPausedByError"
	ExecutionEventTypeStepPausedByOperator                        ExecutionEventType = "stepPausedByOperator"
	ExecutionEventTypeStepCanceled                                ExecutionEventType = "stepCanceled"
	ExecutionEventTypeStepPendingApproval                         ExecutionEventType = "stepPendingApproval"
	ExecutionEventTypeStepExecutionBehaviorChangedToUngraceful    ExecutionEventType = "stepExecutionBehaviorChangedToUngraceful"
	ExecutionEventTypeStepPendingApplicationHealthMonitor         ExecutionEventType = "stepPendingApplicationHealthMonitor"
)

// Values returns all known values for ExecutionEventType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionEventType) Values() []ExecutionEventType {
	return []ExecutionEventType{
		"unknown",
		"executionPending",
		"executionStarted",
		"executionSucceeded",
		"executionFailed",
		"executionPausing",
		"executionPaused",
		"executionCanceling",
		"executionCanceled",
		"executionPendingApproval",
		"executionBehaviorChangedToUngraceful",
		"executionBehaviorChangedToGraceful",
		"executionPendingChildPlanManualApproval",
		"executionSuccessMonitoringApplicationHealth",
		"stepStarted",
		"stepUpdate",
		"stepSucceeded",
		"stepFailed",
		"stepSkipped",
		"stepPausedByError",
		"stepPausedByOperator",
		"stepCanceled",
		"stepPendingApproval",
		"stepExecutionBehaviorChangedToUngraceful",
		"stepPendingApplicationHealthMonitor",
	}
}

type ExecutionMode string

// Enum values for ExecutionMode
const (
	ExecutionModeGraceful   ExecutionMode = "graceful"
	ExecutionModeUngraceful ExecutionMode = "ungraceful"
)

// Values returns all known values for ExecutionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionMode) Values() []ExecutionMode {
	return []ExecutionMode{
		"graceful",
		"ungraceful",
	}
}

type ExecutionState string

// Enum values for ExecutionState
const (
	ExecutionStateInProgress                           ExecutionState = "inProgress"
	ExecutionStatePausedByFailedStep                   ExecutionState = "pausedByFailedStep"
	ExecutionStatePausedByOperator                     ExecutionState = "pausedByOperator"
	ExecutionStateCompleted                            ExecutionState = "completed"
	ExecutionStateCompletedWithExceptions              ExecutionState = "completedWithExceptions"
	ExecutionStateCancelled                            ExecutionState = "canceled"
	ExecutionStatePlanExecutionTimedOut                ExecutionState = "planExecutionTimedOut"
	ExecutionStatePendingManualApproval                ExecutionState = "pendingManualApproval"
	ExecutionStateFailed                               ExecutionState = "failed"
	ExecutionStatePending                              ExecutionState = "pending"
	ExecutionStateCompletedMonitoringApplicationHealth ExecutionState = "completedMonitoringApplicationHealth"
)

// Values returns all known values for ExecutionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionState) Values() []ExecutionState {
	return []ExecutionState{
		"inProgress",
		"pausedByFailedStep",
		"pausedByOperator",
		"completed",
		"completedWithExceptions",
		"canceled",
		"planExecutionTimedOut",
		"pendingManualApproval",
		"failed",
		"pending",
		"completedMonitoringApplicationHealth",
	}
}

type GlobalAuroraDefaultBehavior string

// Enum values for GlobalAuroraDefaultBehavior
const (
	GlobalAuroraDefaultBehaviorSwitchoverOnly GlobalAuroraDefaultBehavior = "switchoverOnly"
	GlobalAuroraDefaultBehaviorFailover       GlobalAuroraDefaultBehavior = "failover"
)

// Values returns all known values for GlobalAuroraDefaultBehavior. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GlobalAuroraDefaultBehavior) Values() []GlobalAuroraDefaultBehavior {
	return []GlobalAuroraDefaultBehavior{
		"switchoverOnly",
		"failover",
	}
}

type GlobalAuroraUngracefulBehavior string

// Enum values for GlobalAuroraUngracefulBehavior
const (
	GlobalAuroraUngracefulBehaviorFailover GlobalAuroraUngracefulBehavior = "failover"
)

// Values returns all known values for GlobalAuroraUngracefulBehavior. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GlobalAuroraUngracefulBehavior) Values() []GlobalAuroraUngracefulBehavior {
	return []GlobalAuroraUngracefulBehavior{
		"failover",
	}
}

type LambdaUngracefulBehavior string

// Enum values for LambdaUngracefulBehavior
const (
	LambdaUngracefulBehaviorSkip LambdaUngracefulBehavior = "skip"
)

// Values returns all known values for LambdaUngracefulBehavior. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LambdaUngracefulBehavior) Values() []LambdaUngracefulBehavior {
	return []LambdaUngracefulBehavior{
		"skip",
	}
}

type RecoveryApproach string

// Enum values for RecoveryApproach
const (
	RecoveryApproachActiveActive  RecoveryApproach = "activeActive"
	RecoveryApproachActivePassive RecoveryApproach = "activePassive"
)

// Values returns all known values for RecoveryApproach. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RecoveryApproach) Values() []RecoveryApproach {
	return []RecoveryApproach{
		"activeActive",
		"activePassive",
	}
}

type RegionToRunIn string

// Enum values for RegionToRunIn
const (
	RegionToRunInActivatingRegion   RegionToRunIn = "activatingRegion"
	RegionToRunInDeactivatingRegion RegionToRunIn = "deactivatingRegion"
)

// Values returns all known values for RegionToRunIn. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RegionToRunIn) Values() []RegionToRunIn {
	return []RegionToRunIn{
		"activatingRegion",
		"deactivatingRegion",
	}
}

type ResourceWarningStatus string

// Enum values for ResourceWarningStatus
const (
	ResourceWarningStatusActive   ResourceWarningStatus = "active"
	ResourceWarningStatusResolved ResourceWarningStatus = "resolved"
)

// Values returns all known values for ResourceWarningStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceWarningStatus) Values() []ResourceWarningStatus {
	return []ResourceWarningStatus{
		"active",
		"resolved",
	}
}

type RoutingControlStateChange string

// Enum values for RoutingControlStateChange
const (
	RoutingControlStateChangeOn  RoutingControlStateChange = "On"
	RoutingControlStateChangeOff RoutingControlStateChange = "Off"
)

// Values returns all known values for RoutingControlStateChange. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutingControlStateChange) Values() []RoutingControlStateChange {
	return []RoutingControlStateChange{
		"On",
		"Off",
	}
}

type StepStatus string

// Enum values for StepStatus
const (
	StepStatusNotStarted      StepStatus = "notStarted"
	StepStatusRunning         StepStatus = "running"
	StepStatusFailed          StepStatus = "failed"
	StepStatusCompleted       StepStatus = "completed"
	StepStatusCancelled       StepStatus = "canceled"
	StepStatusSkipped         StepStatus = "skipped"
	StepStatusPendingApproval StepStatus = "pendingApproval"
)

// Values returns all known values for StepStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StepStatus) Values() []StepStatus {
	return []StepStatus{
		"notStarted",
		"running",
		"failed",
		"completed",
		"canceled",
		"skipped",
		"pendingApproval",
	}
}

type UpdatePlanExecutionAction string

// Enum values for UpdatePlanExecutionAction
const (
	UpdatePlanExecutionActionSwitchToGraceful   UpdatePlanExecutionAction = "switchToGraceful"
	UpdatePlanExecutionActionSwitchToUngraceful UpdatePlanExecutionAction = "switchToUngraceful"
	UpdatePlanExecutionActionPause              UpdatePlanExecutionAction = "pause"
	UpdatePlanExecutionActionResume             UpdatePlanExecutionAction = "resume"
)

// Values returns all known values for UpdatePlanExecutionAction. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UpdatePlanExecutionAction) Values() []UpdatePlanExecutionAction {
	return []UpdatePlanExecutionAction{
		"switchToGraceful",
		"switchToUngraceful",
		"pause",
		"resume",
	}
}

type UpdatePlanExecutionStepAction string

// Enum values for UpdatePlanExecutionStepAction
const (
	UpdatePlanExecutionStepActionSwitchToUngraceful UpdatePlanExecutionStepAction = "switchToUngraceful"
	UpdatePlanExecutionStepActionSkip               UpdatePlanExecutionStepAction = "skip"
)

// Values returns all known values for UpdatePlanExecutionStepAction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UpdatePlanExecutionStepAction) Values() []UpdatePlanExecutionStepAction {
	return []UpdatePlanExecutionStepAction{
		"switchToUngraceful",
		"skip",
	}
}

type WorkflowTargetAction string

// Enum values for WorkflowTargetAction
const (
	WorkflowTargetActionActivate   WorkflowTargetAction = "activate"
	WorkflowTargetActionDeactivate WorkflowTargetAction = "deactivate"
)

// Values returns all known values for WorkflowTargetAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WorkflowTargetAction) Values() []WorkflowTargetAction {
	return []WorkflowTargetAction{
		"activate",
		"deactivate",
	}
}
