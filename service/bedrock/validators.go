// Code generated by smithy-go-codegen DO NOT EDIT.

package bedrock

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/bedrock/types"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/smithy-go/middleware"
)

type validateOpBatchDeleteEvaluationJob struct {
}

func (*validateOpBatchDeleteEvaluationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpBatchDeleteEvaluationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*BatchDeleteEvaluationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpBatchDeleteEvaluationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCancelAutomatedReasoningPolicyBuildWorkflow struct {
}

func (*validateOpCancelAutomatedReasoningPolicyBuildWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCancelAutomatedReasoningPolicyBuildWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CancelAutomatedReasoningPolicyBuildWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCancelAutomatedReasoningPolicyBuildWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAutomatedReasoningPolicy struct {
}

func (*validateOpCreateAutomatedReasoningPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAutomatedReasoningPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAutomatedReasoningPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAutomatedReasoningPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAutomatedReasoningPolicyTestCase struct {
}

func (*validateOpCreateAutomatedReasoningPolicyTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAutomatedReasoningPolicyTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAutomatedReasoningPolicyTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAutomatedReasoningPolicyTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAutomatedReasoningPolicyVersion struct {
}

func (*validateOpCreateAutomatedReasoningPolicyVersion) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAutomatedReasoningPolicyVersion) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAutomatedReasoningPolicyVersionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAutomatedReasoningPolicyVersionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateCustomModelDeployment struct {
}

func (*validateOpCreateCustomModelDeployment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateCustomModelDeployment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateCustomModelDeploymentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateCustomModelDeploymentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateCustomModel struct {
}

func (*validateOpCreateCustomModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateCustomModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateCustomModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateCustomModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateEvaluationJob struct {
}

func (*validateOpCreateEvaluationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateEvaluationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateEvaluationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateEvaluationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateFoundationModelAgreement struct {
}

func (*validateOpCreateFoundationModelAgreement) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateFoundationModelAgreement) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateFoundationModelAgreementInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateFoundationModelAgreementInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateGuardrail struct {
}

func (*validateOpCreateGuardrail) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateGuardrail) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateGuardrailInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateGuardrailInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateGuardrailVersion struct {
}

func (*validateOpCreateGuardrailVersion) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateGuardrailVersion) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateGuardrailVersionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateGuardrailVersionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateInferenceProfile struct {
}

func (*validateOpCreateInferenceProfile) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateInferenceProfile) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateInferenceProfileInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateInferenceProfileInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateMarketplaceModelEndpoint struct {
}

func (*validateOpCreateMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateModelCopyJob struct {
}

func (*validateOpCreateModelCopyJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateModelCopyJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateModelCopyJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateModelCopyJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateModelCustomizationJob struct {
}

func (*validateOpCreateModelCustomizationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateModelCustomizationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateModelCustomizationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateModelCustomizationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateModelImportJob struct {
}

func (*validateOpCreateModelImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateModelImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateModelImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateModelImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateModelInvocationJob struct {
}

func (*validateOpCreateModelInvocationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateModelInvocationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateModelInvocationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateModelInvocationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreatePromptRouter struct {
}

func (*validateOpCreatePromptRouter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreatePromptRouter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreatePromptRouterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreatePromptRouterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateProvisionedModelThroughput struct {
}

func (*validateOpCreateProvisionedModelThroughput) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateProvisionedModelThroughput) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateProvisionedModelThroughputInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateProvisionedModelThroughputInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAutomatedReasoningPolicyBuildWorkflow struct {
}

func (*validateOpDeleteAutomatedReasoningPolicyBuildWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAutomatedReasoningPolicyBuildWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAutomatedReasoningPolicyBuildWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAutomatedReasoningPolicyBuildWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAutomatedReasoningPolicy struct {
}

func (*validateOpDeleteAutomatedReasoningPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAutomatedReasoningPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAutomatedReasoningPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAutomatedReasoningPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAutomatedReasoningPolicyTestCase struct {
}

func (*validateOpDeleteAutomatedReasoningPolicyTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAutomatedReasoningPolicyTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAutomatedReasoningPolicyTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAutomatedReasoningPolicyTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteCustomModelDeployment struct {
}

func (*validateOpDeleteCustomModelDeployment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteCustomModelDeployment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteCustomModelDeploymentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteCustomModelDeploymentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteCustomModel struct {
}

func (*validateOpDeleteCustomModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteCustomModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteCustomModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteCustomModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteFoundationModelAgreement struct {
}

func (*validateOpDeleteFoundationModelAgreement) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteFoundationModelAgreement) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteFoundationModelAgreementInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteFoundationModelAgreementInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteGuardrail struct {
}

func (*validateOpDeleteGuardrail) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteGuardrail) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteGuardrailInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteGuardrailInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteImportedModel struct {
}

func (*validateOpDeleteImportedModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteImportedModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteImportedModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteImportedModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteInferenceProfile struct {
}

func (*validateOpDeleteInferenceProfile) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteInferenceProfile) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteInferenceProfileInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteInferenceProfileInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteMarketplaceModelEndpoint struct {
}

func (*validateOpDeleteMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeletePromptRouter struct {
}

func (*validateOpDeletePromptRouter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeletePromptRouter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeletePromptRouterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeletePromptRouterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteProvisionedModelThroughput struct {
}

func (*validateOpDeleteProvisionedModelThroughput) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteProvisionedModelThroughput) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteProvisionedModelThroughputInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteProvisionedModelThroughputInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeregisterMarketplaceModelEndpoint struct {
}

func (*validateOpDeregisterMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeregisterMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeregisterMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeregisterMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpExportAutomatedReasoningPolicyVersion struct {
}

func (*validateOpExportAutomatedReasoningPolicyVersion) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpExportAutomatedReasoningPolicyVersion) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ExportAutomatedReasoningPolicyVersionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpExportAutomatedReasoningPolicyVersionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyAnnotations struct {
}

func (*validateOpGetAutomatedReasoningPolicyAnnotations) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyAnnotations) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyAnnotationsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyAnnotationsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyBuildWorkflow struct {
}

func (*validateOpGetAutomatedReasoningPolicyBuildWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyBuildWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyBuildWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyBuildWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssets struct {
}

func (*validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssets) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssets) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssetsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicy struct {
}

func (*validateOpGetAutomatedReasoningPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyNextScenario struct {
}

func (*validateOpGetAutomatedReasoningPolicyNextScenario) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyNextScenario) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyNextScenarioInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyNextScenarioInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyTestCase struct {
}

func (*validateOpGetAutomatedReasoningPolicyTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAutomatedReasoningPolicyTestResult struct {
}

func (*validateOpGetAutomatedReasoningPolicyTestResult) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAutomatedReasoningPolicyTestResult) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAutomatedReasoningPolicyTestResultInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAutomatedReasoningPolicyTestResultInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetCustomModelDeployment struct {
}

func (*validateOpGetCustomModelDeployment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetCustomModelDeployment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetCustomModelDeploymentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetCustomModelDeploymentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetCustomModel struct {
}

func (*validateOpGetCustomModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetCustomModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetCustomModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetCustomModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetEvaluationJob struct {
}

func (*validateOpGetEvaluationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetEvaluationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetEvaluationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetEvaluationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetFoundationModelAvailability struct {
}

func (*validateOpGetFoundationModelAvailability) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetFoundationModelAvailability) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetFoundationModelAvailabilityInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetFoundationModelAvailabilityInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetFoundationModel struct {
}

func (*validateOpGetFoundationModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetFoundationModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetFoundationModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetFoundationModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetGuardrail struct {
}

func (*validateOpGetGuardrail) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetGuardrail) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetGuardrailInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetGuardrailInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetImportedModel struct {
}

func (*validateOpGetImportedModel) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetImportedModel) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetImportedModelInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetImportedModelInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetInferenceProfile struct {
}

func (*validateOpGetInferenceProfile) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetInferenceProfile) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetInferenceProfileInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetInferenceProfileInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMarketplaceModelEndpoint struct {
}

func (*validateOpGetMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetModelCopyJob struct {
}

func (*validateOpGetModelCopyJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetModelCopyJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetModelCopyJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetModelCopyJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetModelCustomizationJob struct {
}

func (*validateOpGetModelCustomizationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetModelCustomizationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetModelCustomizationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetModelCustomizationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetModelImportJob struct {
}

func (*validateOpGetModelImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetModelImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetModelImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetModelImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetModelInvocationJob struct {
}

func (*validateOpGetModelInvocationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetModelInvocationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetModelInvocationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetModelInvocationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetPromptRouter struct {
}

func (*validateOpGetPromptRouter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetPromptRouter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetPromptRouterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetPromptRouterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetProvisionedModelThroughput struct {
}

func (*validateOpGetProvisionedModelThroughput) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetProvisionedModelThroughput) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetProvisionedModelThroughputInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetProvisionedModelThroughputInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAutomatedReasoningPolicyBuildWorkflows struct {
}

func (*validateOpListAutomatedReasoningPolicyBuildWorkflows) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAutomatedReasoningPolicyBuildWorkflows) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAutomatedReasoningPolicyBuildWorkflowsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAutomatedReasoningPolicyBuildWorkflowsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAutomatedReasoningPolicyTestCases struct {
}

func (*validateOpListAutomatedReasoningPolicyTestCases) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAutomatedReasoningPolicyTestCases) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAutomatedReasoningPolicyTestCasesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAutomatedReasoningPolicyTestCasesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAutomatedReasoningPolicyTestResults struct {
}

func (*validateOpListAutomatedReasoningPolicyTestResults) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAutomatedReasoningPolicyTestResults) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAutomatedReasoningPolicyTestResultsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAutomatedReasoningPolicyTestResultsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListFoundationModelAgreementOffers struct {
}

func (*validateOpListFoundationModelAgreementOffers) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListFoundationModelAgreementOffers) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListFoundationModelAgreementOffersInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListFoundationModelAgreementOffersInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutModelInvocationLoggingConfiguration struct {
}

func (*validateOpPutModelInvocationLoggingConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutModelInvocationLoggingConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutModelInvocationLoggingConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutModelInvocationLoggingConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutUseCaseForModelAccess struct {
}

func (*validateOpPutUseCaseForModelAccess) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutUseCaseForModelAccess) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutUseCaseForModelAccessInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutUseCaseForModelAccessInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpRegisterMarketplaceModelEndpoint struct {
}

func (*validateOpRegisterMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpRegisterMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*RegisterMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpRegisterMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartAutomatedReasoningPolicyBuildWorkflow struct {
}

func (*validateOpStartAutomatedReasoningPolicyBuildWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartAutomatedReasoningPolicyBuildWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartAutomatedReasoningPolicyBuildWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartAutomatedReasoningPolicyBuildWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartAutomatedReasoningPolicyTestWorkflow struct {
}

func (*validateOpStartAutomatedReasoningPolicyTestWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartAutomatedReasoningPolicyTestWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartAutomatedReasoningPolicyTestWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartAutomatedReasoningPolicyTestWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopEvaluationJob struct {
}

func (*validateOpStopEvaluationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopEvaluationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopEvaluationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopEvaluationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopModelCustomizationJob struct {
}

func (*validateOpStopModelCustomizationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopModelCustomizationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopModelCustomizationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopModelCustomizationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopModelInvocationJob struct {
}

func (*validateOpStopModelInvocationJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopModelInvocationJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopModelInvocationJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopModelInvocationJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateAutomatedReasoningPolicyAnnotations struct {
}

func (*validateOpUpdateAutomatedReasoningPolicyAnnotations) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateAutomatedReasoningPolicyAnnotations) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateAutomatedReasoningPolicyAnnotationsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateAutomatedReasoningPolicyAnnotationsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateAutomatedReasoningPolicy struct {
}

func (*validateOpUpdateAutomatedReasoningPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateAutomatedReasoningPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateAutomatedReasoningPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateAutomatedReasoningPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateAutomatedReasoningPolicyTestCase struct {
}

func (*validateOpUpdateAutomatedReasoningPolicyTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateAutomatedReasoningPolicyTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateAutomatedReasoningPolicyTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateAutomatedReasoningPolicyTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateGuardrail struct {
}

func (*validateOpUpdateGuardrail) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateGuardrail) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateGuardrailInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateGuardrailInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateMarketplaceModelEndpoint struct {
}

func (*validateOpUpdateMarketplaceModelEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateMarketplaceModelEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateMarketplaceModelEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateMarketplaceModelEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateProvisionedModelThroughput struct {
}

func (*validateOpUpdateProvisionedModelThroughput) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateProvisionedModelThroughput) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateProvisionedModelThroughputInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateProvisionedModelThroughputInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpBatchDeleteEvaluationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpBatchDeleteEvaluationJob{}, middleware.After)
}

func addOpCancelAutomatedReasoningPolicyBuildWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCancelAutomatedReasoningPolicyBuildWorkflow{}, middleware.After)
}

func addOpCreateAutomatedReasoningPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAutomatedReasoningPolicy{}, middleware.After)
}

func addOpCreateAutomatedReasoningPolicyTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAutomatedReasoningPolicyTestCase{}, middleware.After)
}

func addOpCreateAutomatedReasoningPolicyVersionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAutomatedReasoningPolicyVersion{}, middleware.After)
}

func addOpCreateCustomModelDeploymentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateCustomModelDeployment{}, middleware.After)
}

func addOpCreateCustomModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateCustomModel{}, middleware.After)
}

func addOpCreateEvaluationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateEvaluationJob{}, middleware.After)
}

func addOpCreateFoundationModelAgreementValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateFoundationModelAgreement{}, middleware.After)
}

func addOpCreateGuardrailValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateGuardrail{}, middleware.After)
}

func addOpCreateGuardrailVersionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateGuardrailVersion{}, middleware.After)
}

func addOpCreateInferenceProfileValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateInferenceProfile{}, middleware.After)
}

func addOpCreateMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateMarketplaceModelEndpoint{}, middleware.After)
}

func addOpCreateModelCopyJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateModelCopyJob{}, middleware.After)
}

func addOpCreateModelCustomizationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateModelCustomizationJob{}, middleware.After)
}

func addOpCreateModelImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateModelImportJob{}, middleware.After)
}

func addOpCreateModelInvocationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateModelInvocationJob{}, middleware.After)
}

func addOpCreatePromptRouterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreatePromptRouter{}, middleware.After)
}

func addOpCreateProvisionedModelThroughputValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateProvisionedModelThroughput{}, middleware.After)
}

func addOpDeleteAutomatedReasoningPolicyBuildWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAutomatedReasoningPolicyBuildWorkflow{}, middleware.After)
}

func addOpDeleteAutomatedReasoningPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAutomatedReasoningPolicy{}, middleware.After)
}

func addOpDeleteAutomatedReasoningPolicyTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAutomatedReasoningPolicyTestCase{}, middleware.After)
}

func addOpDeleteCustomModelDeploymentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteCustomModelDeployment{}, middleware.After)
}

func addOpDeleteCustomModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteCustomModel{}, middleware.After)
}

func addOpDeleteFoundationModelAgreementValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteFoundationModelAgreement{}, middleware.After)
}

func addOpDeleteGuardrailValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteGuardrail{}, middleware.After)
}

func addOpDeleteImportedModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteImportedModel{}, middleware.After)
}

func addOpDeleteInferenceProfileValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteInferenceProfile{}, middleware.After)
}

func addOpDeleteMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteMarketplaceModelEndpoint{}, middleware.After)
}

func addOpDeletePromptRouterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeletePromptRouter{}, middleware.After)
}

func addOpDeleteProvisionedModelThroughputValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteProvisionedModelThroughput{}, middleware.After)
}

func addOpDeregisterMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeregisterMarketplaceModelEndpoint{}, middleware.After)
}

func addOpExportAutomatedReasoningPolicyVersionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpExportAutomatedReasoningPolicyVersion{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyAnnotationsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyAnnotations{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyBuildWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyBuildWorkflow{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyBuildWorkflowResultAssetsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssets{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicy{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyNextScenarioValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyNextScenario{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyTestCase{}, middleware.After)
}

func addOpGetAutomatedReasoningPolicyTestResultValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAutomatedReasoningPolicyTestResult{}, middleware.After)
}

func addOpGetCustomModelDeploymentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetCustomModelDeployment{}, middleware.After)
}

func addOpGetCustomModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetCustomModel{}, middleware.After)
}

func addOpGetEvaluationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetEvaluationJob{}, middleware.After)
}

func addOpGetFoundationModelAvailabilityValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetFoundationModelAvailability{}, middleware.After)
}

func addOpGetFoundationModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetFoundationModel{}, middleware.After)
}

func addOpGetGuardrailValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetGuardrail{}, middleware.After)
}

func addOpGetImportedModelValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetImportedModel{}, middleware.After)
}

func addOpGetInferenceProfileValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetInferenceProfile{}, middleware.After)
}

func addOpGetMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMarketplaceModelEndpoint{}, middleware.After)
}

func addOpGetModelCopyJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetModelCopyJob{}, middleware.After)
}

func addOpGetModelCustomizationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetModelCustomizationJob{}, middleware.After)
}

func addOpGetModelImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetModelImportJob{}, middleware.After)
}

func addOpGetModelInvocationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetModelInvocationJob{}, middleware.After)
}

func addOpGetPromptRouterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetPromptRouter{}, middleware.After)
}

func addOpGetProvisionedModelThroughputValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetProvisionedModelThroughput{}, middleware.After)
}

func addOpListAutomatedReasoningPolicyBuildWorkflowsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAutomatedReasoningPolicyBuildWorkflows{}, middleware.After)
}

func addOpListAutomatedReasoningPolicyTestCasesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAutomatedReasoningPolicyTestCases{}, middleware.After)
}

func addOpListAutomatedReasoningPolicyTestResultsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAutomatedReasoningPolicyTestResults{}, middleware.After)
}

func addOpListFoundationModelAgreementOffersValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListFoundationModelAgreementOffers{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpPutModelInvocationLoggingConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutModelInvocationLoggingConfiguration{}, middleware.After)
}

func addOpPutUseCaseForModelAccessValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutUseCaseForModelAccess{}, middleware.After)
}

func addOpRegisterMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpRegisterMarketplaceModelEndpoint{}, middleware.After)
}

func addOpStartAutomatedReasoningPolicyBuildWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartAutomatedReasoningPolicyBuildWorkflow{}, middleware.After)
}

func addOpStartAutomatedReasoningPolicyTestWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartAutomatedReasoningPolicyTestWorkflow{}, middleware.After)
}

func addOpStopEvaluationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopEvaluationJob{}, middleware.After)
}

func addOpStopModelCustomizationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopModelCustomizationJob{}, middleware.After)
}

func addOpStopModelInvocationJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopModelInvocationJob{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateAutomatedReasoningPolicyAnnotationsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateAutomatedReasoningPolicyAnnotations{}, middleware.After)
}

func addOpUpdateAutomatedReasoningPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateAutomatedReasoningPolicy{}, middleware.After)
}

func addOpUpdateAutomatedReasoningPolicyTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateAutomatedReasoningPolicyTestCase{}, middleware.After)
}

func addOpUpdateGuardrailValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateGuardrail{}, middleware.After)
}

func addOpUpdateMarketplaceModelEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateMarketplaceModelEndpoint{}, middleware.After)
}

func addOpUpdateProvisionedModelThroughputValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateProvisionedModelThroughput{}, middleware.After)
}

func validateAutomatedEvaluationConfig(v *types.AutomatedEvaluationConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedEvaluationConfig"}
	if v.DatasetMetricConfigs == nil {
		invalidParams.Add(smithy.NewErrParamRequired("DatasetMetricConfigs"))
	} else if v.DatasetMetricConfigs != nil {
		if err := validateEvaluationDatasetMetricConfigs(v.DatasetMetricConfigs); err != nil {
			invalidParams.AddNested("DatasetMetricConfigs", err.(smithy.InvalidParamsError))
		}
	}
	if v.EvaluatorModelConfig != nil {
		if err := validateEvaluatorModelConfig(v.EvaluatorModelConfig); err != nil {
			invalidParams.AddNested("EvaluatorModelConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.CustomMetricConfig != nil {
		if err := validateAutomatedEvaluationCustomMetricConfig(v.CustomMetricConfig); err != nil {
			invalidParams.AddNested("CustomMetricConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedEvaluationCustomMetricConfig(v *types.AutomatedEvaluationCustomMetricConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedEvaluationCustomMetricConfig"}
	if v.CustomMetrics == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomMetrics"))
	} else if v.CustomMetrics != nil {
		if err := validateAutomatedEvaluationCustomMetrics(v.CustomMetrics); err != nil {
			invalidParams.AddNested("CustomMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if v.EvaluatorModelConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EvaluatorModelConfig"))
	} else if v.EvaluatorModelConfig != nil {
		if err := validateCustomMetricEvaluatorModelConfig(v.EvaluatorModelConfig); err != nil {
			invalidParams.AddNested("EvaluatorModelConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedEvaluationCustomMetrics(v []types.AutomatedEvaluationCustomMetricSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedEvaluationCustomMetrics"}
	for i := range v {
		if err := validateAutomatedEvaluationCustomMetricSource(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedEvaluationCustomMetricSource(v types.AutomatedEvaluationCustomMetricSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedEvaluationCustomMetricSource"}
	switch uv := v.(type) {
	case *types.AutomatedEvaluationCustomMetricSourceMemberCustomMetricDefinition:
		if err := validateCustomMetricDefinition(&uv.Value); err != nil {
			invalidParams.AddNested("[customMetricDefinition]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAddRuleAnnotation(v *types.AutomatedReasoningPolicyAddRuleAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAddRuleAnnotation"}
	if v.Expression == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Expression"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation(v *types.AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation"}
	if v.NaturalLanguage == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NaturalLanguage"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAddTypeAnnotation(v *types.AutomatedReasoningPolicyAddTypeAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAddTypeAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Description == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Description"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	} else if v.Values != nil {
		if err := validateAutomatedReasoningPolicyDefinitionTypeValueList(v.Values); err != nil {
			invalidParams.AddNested("Values", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAddTypeValue(v *types.AutomatedReasoningPolicyAddTypeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAddTypeValue"}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAddVariableAnnotation(v *types.AutomatedReasoningPolicyAddVariableAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAddVariableAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Type == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Description == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Description"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAnnotation(v types.AutomatedReasoningPolicyAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAnnotation"}
	switch uv := v.(type) {
	case *types.AutomatedReasoningPolicyAnnotationMemberAddRule:
		if err := validateAutomatedReasoningPolicyAddRuleAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[addRule]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberAddRuleFromNaturalLanguage:
		if err := validateAutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[addRuleFromNaturalLanguage]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberAddType:
		if err := validateAutomatedReasoningPolicyAddTypeAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[addType]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberAddVariable:
		if err := validateAutomatedReasoningPolicyAddVariableAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[addVariable]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberDeleteRule:
		if err := validateAutomatedReasoningPolicyDeleteRuleAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[deleteRule]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberDeleteType:
		if err := validateAutomatedReasoningPolicyDeleteTypeAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[deleteType]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberDeleteVariable:
		if err := validateAutomatedReasoningPolicyDeleteVariableAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[deleteVariable]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberIngestContent:
		if err := validateAutomatedReasoningPolicyIngestContentAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[ingestContent]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberUpdateFromRulesFeedback:
		if err := validateAutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[updateFromRulesFeedback]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberUpdateFromScenarioFeedback:
		if err := validateAutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[updateFromScenarioFeedback]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberUpdateRule:
		if err := validateAutomatedReasoningPolicyUpdateRuleAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[updateRule]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberUpdateType:
		if err := validateAutomatedReasoningPolicyUpdateTypeAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[updateType]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyAnnotationMemberUpdateVariable:
		if err := validateAutomatedReasoningPolicyUpdateVariableAnnotation(&uv.Value); err != nil {
			invalidParams.AddNested("[updateVariable]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyAnnotationList(v []types.AutomatedReasoningPolicyAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyAnnotationList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyAnnotation(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyBuildWorkflowDocument(v *types.AutomatedReasoningPolicyBuildWorkflowDocument) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyBuildWorkflowDocument"}
	if v.Document == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Document"))
	}
	if len(v.DocumentContentType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("DocumentContentType"))
	}
	if v.DocumentName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("DocumentName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyBuildWorkflowDocumentList(v []types.AutomatedReasoningPolicyBuildWorkflowDocument) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyBuildWorkflowDocumentList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyBuildWorkflowDocument(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyBuildWorkflowRepairContent(v *types.AutomatedReasoningPolicyBuildWorkflowRepairContent) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyBuildWorkflowRepairContent"}
	if v.Annotations == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Annotations"))
	} else if v.Annotations != nil {
		if err := validateAutomatedReasoningPolicyAnnotationList(v.Annotations); err != nil {
			invalidParams.AddNested("Annotations", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyBuildWorkflowSource(v *types.AutomatedReasoningPolicyBuildWorkflowSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyBuildWorkflowSource"}
	if v.PolicyDefinition != nil {
		if err := validateAutomatedReasoningPolicyDefinition(v.PolicyDefinition); err != nil {
			invalidParams.AddNested("PolicyDefinition", err.(smithy.InvalidParamsError))
		}
	}
	if v.WorkflowContent != nil {
		if err := validateAutomatedReasoningPolicyWorkflowTypeContent(v.WorkflowContent); err != nil {
			invalidParams.AddNested("WorkflowContent", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinition(v *types.AutomatedReasoningPolicyDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinition"}
	if v.Types != nil {
		if err := validateAutomatedReasoningPolicyDefinitionTypeList(v.Types); err != nil {
			invalidParams.AddNested("Types", err.(smithy.InvalidParamsError))
		}
	}
	if v.Rules != nil {
		if err := validateAutomatedReasoningPolicyDefinitionRuleList(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if v.Variables != nil {
		if err := validateAutomatedReasoningPolicyDefinitionVariableList(v.Variables); err != nil {
			invalidParams.AddNested("Variables", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionRule(v *types.AutomatedReasoningPolicyDefinitionRule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionRule"}
	if v.Id == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if v.Expression == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Expression"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionRuleList(v []types.AutomatedReasoningPolicyDefinitionRule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionRuleList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyDefinitionRule(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionType(v *types.AutomatedReasoningPolicyDefinitionType) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionType"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	} else if v.Values != nil {
		if err := validateAutomatedReasoningPolicyDefinitionTypeValueList(v.Values); err != nil {
			invalidParams.AddNested("Values", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionTypeList(v []types.AutomatedReasoningPolicyDefinitionType) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionTypeList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyDefinitionType(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionTypeValue(v *types.AutomatedReasoningPolicyDefinitionTypeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionTypeValue"}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionTypeValueList(v []types.AutomatedReasoningPolicyDefinitionTypeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionTypeValueList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyDefinitionTypeValue(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionVariable(v *types.AutomatedReasoningPolicyDefinitionVariable) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionVariable"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Type == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Description == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Description"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDefinitionVariableList(v []types.AutomatedReasoningPolicyDefinitionVariable) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDefinitionVariableList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyDefinitionVariable(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDeleteRuleAnnotation(v *types.AutomatedReasoningPolicyDeleteRuleAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDeleteRuleAnnotation"}
	if v.RuleId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDeleteTypeAnnotation(v *types.AutomatedReasoningPolicyDeleteTypeAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDeleteTypeAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDeleteTypeValue(v *types.AutomatedReasoningPolicyDeleteTypeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDeleteTypeValue"}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyDeleteVariableAnnotation(v *types.AutomatedReasoningPolicyDeleteVariableAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyDeleteVariableAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyIngestContentAnnotation(v *types.AutomatedReasoningPolicyIngestContentAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyIngestContentAnnotation"}
	if v.Content == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Content"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyTypeValueAnnotation(v types.AutomatedReasoningPolicyTypeValueAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyTypeValueAnnotation"}
	switch uv := v.(type) {
	case *types.AutomatedReasoningPolicyTypeValueAnnotationMemberAddTypeValue:
		if err := validateAutomatedReasoningPolicyAddTypeValue(&uv.Value); err != nil {
			invalidParams.AddNested("[addTypeValue]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyTypeValueAnnotationMemberDeleteTypeValue:
		if err := validateAutomatedReasoningPolicyDeleteTypeValue(&uv.Value); err != nil {
			invalidParams.AddNested("[deleteTypeValue]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyTypeValueAnnotationMemberUpdateTypeValue:
		if err := validateAutomatedReasoningPolicyUpdateTypeValue(&uv.Value); err != nil {
			invalidParams.AddNested("[updateTypeValue]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyTypeValueAnnotationList(v []types.AutomatedReasoningPolicyTypeValueAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyTypeValueAnnotationList"}
	for i := range v {
		if err := validateAutomatedReasoningPolicyTypeValueAnnotation(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation(v *types.AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation"}
	if v.Feedback == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Feedback"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation(v *types.AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation"}
	if v.ScenarioExpression == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ScenarioExpression"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateRuleAnnotation(v *types.AutomatedReasoningPolicyUpdateRuleAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateRuleAnnotation"}
	if v.RuleId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleId"))
	}
	if v.Expression == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Expression"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateTypeAnnotation(v *types.AutomatedReasoningPolicyUpdateTypeAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateTypeAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	} else if v.Values != nil {
		if err := validateAutomatedReasoningPolicyTypeValueAnnotationList(v.Values); err != nil {
			invalidParams.AddNested("Values", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateTypeValue(v *types.AutomatedReasoningPolicyUpdateTypeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateTypeValue"}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyUpdateVariableAnnotation(v *types.AutomatedReasoningPolicyUpdateVariableAnnotation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyUpdateVariableAnnotation"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutomatedReasoningPolicyWorkflowTypeContent(v types.AutomatedReasoningPolicyWorkflowTypeContent) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutomatedReasoningPolicyWorkflowTypeContent"}
	switch uv := v.(type) {
	case *types.AutomatedReasoningPolicyWorkflowTypeContentMemberDocuments:
		if err := validateAutomatedReasoningPolicyBuildWorkflowDocumentList(uv.Value); err != nil {
			invalidParams.AddNested("[documents]", err.(smithy.InvalidParamsError))
		}

	case *types.AutomatedReasoningPolicyWorkflowTypeContentMemberPolicyRepairAssets:
		if err := validateAutomatedReasoningPolicyBuildWorkflowRepairContent(&uv.Value); err != nil {
			invalidParams.AddNested("[policyRepairAssets]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateBedrockEvaluatorModel(v *types.BedrockEvaluatorModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BedrockEvaluatorModel"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateBedrockEvaluatorModels(v []types.BedrockEvaluatorModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BedrockEvaluatorModels"}
	for i := range v {
		if err := validateBedrockEvaluatorModel(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateByteContentDoc(v *types.ByteContentDoc) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ByteContentDoc"}
	if v.Identifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Identifier"))
	}
	if v.ContentType == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ContentType"))
	}
	if v.Data == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Data"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCloudWatchConfig(v *types.CloudWatchConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CloudWatchConfig"}
	if v.LogGroupName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LogGroupName"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.LargeDataDeliveryS3Config != nil {
		if err := validateS3Config(v.LargeDataDeliveryS3Config); err != nil {
			invalidParams.AddNested("LargeDataDeliveryS3Config", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomizationConfig(v types.CustomizationConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomizationConfig"}
	switch uv := v.(type) {
	case *types.CustomizationConfigMemberDistillationConfig:
		if err := validateDistillationConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[distillationConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomMetricBedrockEvaluatorModel(v *types.CustomMetricBedrockEvaluatorModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomMetricBedrockEvaluatorModel"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomMetricBedrockEvaluatorModels(v []types.CustomMetricBedrockEvaluatorModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomMetricBedrockEvaluatorModels"}
	for i := range v {
		if err := validateCustomMetricBedrockEvaluatorModel(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomMetricDefinition(v *types.CustomMetricDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomMetricDefinition"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Instructions == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Instructions"))
	}
	if v.RatingScale != nil {
		if err := validateRatingScale(v.RatingScale); err != nil {
			invalidParams.AddNested("RatingScale", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomMetricEvaluatorModelConfig(v *types.CustomMetricEvaluatorModelConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomMetricEvaluatorModelConfig"}
	if v.BedrockEvaluatorModels == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BedrockEvaluatorModels"))
	} else if v.BedrockEvaluatorModels != nil {
		if err := validateCustomMetricBedrockEvaluatorModels(v.BedrockEvaluatorModels); err != nil {
			invalidParams.AddNested("BedrockEvaluatorModels", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDistillationConfig(v *types.DistillationConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DistillationConfig"}
	if v.TeacherModelConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TeacherModelConfig"))
	} else if v.TeacherModelConfig != nil {
		if err := validateTeacherModelConfig(v.TeacherModelConfig); err != nil {
			invalidParams.AddNested("TeacherModelConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEndpointConfig(v types.EndpointConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EndpointConfig"}
	switch uv := v.(type) {
	case *types.EndpointConfigMemberSageMaker:
		if err := validateSageMakerEndpoint(&uv.Value); err != nil {
			invalidParams.AddNested("[sageMaker]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationBedrockModel(v *types.EvaluationBedrockModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationBedrockModel"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationConfig(v types.EvaluationConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationConfig"}
	switch uv := v.(type) {
	case *types.EvaluationConfigMemberAutomated:
		if err := validateAutomatedEvaluationConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[automated]", err.(smithy.InvalidParamsError))
		}

	case *types.EvaluationConfigMemberHuman:
		if err := validateHumanEvaluationConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[human]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationDataset(v *types.EvaluationDataset) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationDataset"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationDatasetMetricConfig(v *types.EvaluationDatasetMetricConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationDatasetMetricConfig"}
	if len(v.TaskType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TaskType"))
	}
	if v.Dataset == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Dataset"))
	} else if v.Dataset != nil {
		if err := validateEvaluationDataset(v.Dataset); err != nil {
			invalidParams.AddNested("Dataset", err.(smithy.InvalidParamsError))
		}
	}
	if v.MetricNames == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MetricNames"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationDatasetMetricConfigs(v []types.EvaluationDatasetMetricConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationDatasetMetricConfigs"}
	for i := range v {
		if err := validateEvaluationDatasetMetricConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationInferenceConfig(v types.EvaluationInferenceConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationInferenceConfig"}
	switch uv := v.(type) {
	case *types.EvaluationInferenceConfigMemberModels:
		if err := validateEvaluationModelConfigs(uv.Value); err != nil {
			invalidParams.AddNested("[models]", err.(smithy.InvalidParamsError))
		}

	case *types.EvaluationInferenceConfigMemberRagConfigs:
		if err := validateRagConfigs(uv.Value); err != nil {
			invalidParams.AddNested("[ragConfigs]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationModelConfig(v types.EvaluationModelConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationModelConfig"}
	switch uv := v.(type) {
	case *types.EvaluationModelConfigMemberBedrockModel:
		if err := validateEvaluationBedrockModel(&uv.Value); err != nil {
			invalidParams.AddNested("[bedrockModel]", err.(smithy.InvalidParamsError))
		}

	case *types.EvaluationModelConfigMemberPrecomputedInferenceSource:
		if err := validateEvaluationPrecomputedInferenceSource(&uv.Value); err != nil {
			invalidParams.AddNested("[precomputedInferenceSource]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationModelConfigs(v []types.EvaluationModelConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationModelConfigs"}
	for i := range v {
		if err := validateEvaluationModelConfig(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationOutputDataConfig(v *types.EvaluationOutputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationOutputDataConfig"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationPrecomputedInferenceSource(v *types.EvaluationPrecomputedInferenceSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationPrecomputedInferenceSource"}
	if v.InferenceSourceIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InferenceSourceIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationPrecomputedRagSourceConfig(v types.EvaluationPrecomputedRagSourceConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationPrecomputedRagSourceConfig"}
	switch uv := v.(type) {
	case *types.EvaluationPrecomputedRagSourceConfigMemberRetrieveAndGenerateSourceConfig:
		if err := validateEvaluationPrecomputedRetrieveAndGenerateSourceConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[retrieveAndGenerateSourceConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.EvaluationPrecomputedRagSourceConfigMemberRetrieveSourceConfig:
		if err := validateEvaluationPrecomputedRetrieveSourceConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[retrieveSourceConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationPrecomputedRetrieveAndGenerateSourceConfig(v *types.EvaluationPrecomputedRetrieveAndGenerateSourceConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationPrecomputedRetrieveAndGenerateSourceConfig"}
	if v.RagSourceIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RagSourceIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluationPrecomputedRetrieveSourceConfig(v *types.EvaluationPrecomputedRetrieveSourceConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluationPrecomputedRetrieveSourceConfig"}
	if v.RagSourceIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RagSourceIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEvaluatorModelConfig(v types.EvaluatorModelConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EvaluatorModelConfig"}
	switch uv := v.(type) {
	case *types.EvaluatorModelConfigMemberBedrockEvaluatorModels:
		if err := validateBedrockEvaluatorModels(uv.Value); err != nil {
			invalidParams.AddNested("[bedrockEvaluatorModels]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateExternalSource(v *types.ExternalSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ExternalSource"}
	if len(v.SourceType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("SourceType"))
	}
	if v.S3Location != nil {
		if err := validateS3ObjectDoc(v.S3Location); err != nil {
			invalidParams.AddNested("S3Location", err.(smithy.InvalidParamsError))
		}
	}
	if v.ByteContent != nil {
		if err := validateByteContentDoc(v.ByteContent); err != nil {
			invalidParams.AddNested("ByteContent", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateExternalSources(v []types.ExternalSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ExternalSources"}
	for i := range v {
		if err := validateExternalSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateExternalSourcesGenerationConfiguration(v *types.ExternalSourcesGenerationConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ExternalSourcesGenerationConfiguration"}
	if v.GuardrailConfiguration != nil {
		if err := validateGuardrailConfiguration(v.GuardrailConfiguration); err != nil {
			invalidParams.AddNested("GuardrailConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateExternalSourcesRetrieveAndGenerateConfiguration(v *types.ExternalSourcesRetrieveAndGenerateConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ExternalSourcesRetrieveAndGenerateConfiguration"}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if v.Sources == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Sources"))
	} else if v.Sources != nil {
		if err := validateExternalSources(v.Sources); err != nil {
			invalidParams.AddNested("Sources", err.(smithy.InvalidParamsError))
		}
	}
	if v.GenerationConfiguration != nil {
		if err := validateExternalSourcesGenerationConfiguration(v.GenerationConfiguration); err != nil {
			invalidParams.AddNested("GenerationConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateFieldForReranking(v *types.FieldForReranking) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "FieldForReranking"}
	if v.FieldName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FieldName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateFieldsForReranking(v []types.FieldForReranking) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "FieldsForReranking"}
	for i := range v {
		if err := validateFieldForReranking(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateFilterAttribute(v *types.FilterAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "FilterAttribute"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGenerationConfiguration(v *types.GenerationConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GenerationConfiguration"}
	if v.GuardrailConfiguration != nil {
		if err := validateGuardrailConfiguration(v.GuardrailConfiguration); err != nil {
			invalidParams.AddNested("GuardrailConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailAutomatedReasoningPolicyConfig(v *types.GuardrailAutomatedReasoningPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailAutomatedReasoningPolicyConfig"}
	if v.Policies == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Policies"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailConfiguration(v *types.GuardrailConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailConfiguration"}
	if v.GuardrailId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailId"))
	}
	if v.GuardrailVersion == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailVersion"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContentFilterConfig(v *types.GuardrailContentFilterConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContentFilterConfig"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if len(v.InputStrength) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("InputStrength"))
	}
	if len(v.OutputStrength) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("OutputStrength"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContentFiltersConfig(v []types.GuardrailContentFilterConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContentFiltersConfig"}
	for i := range v {
		if err := validateGuardrailContentFilterConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContentFiltersTierConfig(v *types.GuardrailContentFiltersTierConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContentFiltersTierConfig"}
	if len(v.TierName) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TierName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContentPolicyConfig(v *types.GuardrailContentPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContentPolicyConfig"}
	if v.FiltersConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FiltersConfig"))
	} else if v.FiltersConfig != nil {
		if err := validateGuardrailContentFiltersConfig(v.FiltersConfig); err != nil {
			invalidParams.AddNested("FiltersConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.TierConfig != nil {
		if err := validateGuardrailContentFiltersTierConfig(v.TierConfig); err != nil {
			invalidParams.AddNested("TierConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContextualGroundingFilterConfig(v *types.GuardrailContextualGroundingFilterConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContextualGroundingFilterConfig"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Threshold == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Threshold"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContextualGroundingFiltersConfig(v []types.GuardrailContextualGroundingFilterConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContextualGroundingFiltersConfig"}
	for i := range v {
		if err := validateGuardrailContextualGroundingFilterConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailContextualGroundingPolicyConfig(v *types.GuardrailContextualGroundingPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailContextualGroundingPolicyConfig"}
	if v.FiltersConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FiltersConfig"))
	} else if v.FiltersConfig != nil {
		if err := validateGuardrailContextualGroundingFiltersConfig(v.FiltersConfig); err != nil {
			invalidParams.AddNested("FiltersConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailCrossRegionConfig(v *types.GuardrailCrossRegionConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailCrossRegionConfig"}
	if v.GuardrailProfileIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailProfileIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailManagedWordListsConfig(v []types.GuardrailManagedWordsConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailManagedWordListsConfig"}
	for i := range v {
		if err := validateGuardrailManagedWordsConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailManagedWordsConfig(v *types.GuardrailManagedWordsConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailManagedWordsConfig"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailPiiEntitiesConfig(v []types.GuardrailPiiEntityConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailPiiEntitiesConfig"}
	for i := range v {
		if err := validateGuardrailPiiEntityConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailPiiEntityConfig(v *types.GuardrailPiiEntityConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailPiiEntityConfig"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if len(v.Action) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Action"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailRegexConfig(v *types.GuardrailRegexConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailRegexConfig"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Pattern == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Pattern"))
	}
	if len(v.Action) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Action"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailRegexesConfig(v []types.GuardrailRegexConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailRegexesConfig"}
	for i := range v {
		if err := validateGuardrailRegexConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailSensitiveInformationPolicyConfig(v *types.GuardrailSensitiveInformationPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailSensitiveInformationPolicyConfig"}
	if v.PiiEntitiesConfig != nil {
		if err := validateGuardrailPiiEntitiesConfig(v.PiiEntitiesConfig); err != nil {
			invalidParams.AddNested("PiiEntitiesConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.RegexesConfig != nil {
		if err := validateGuardrailRegexesConfig(v.RegexesConfig); err != nil {
			invalidParams.AddNested("RegexesConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailTopicConfig(v *types.GuardrailTopicConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailTopicConfig"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Definition == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Definition"))
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailTopicPolicyConfig(v *types.GuardrailTopicPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailTopicPolicyConfig"}
	if v.TopicsConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TopicsConfig"))
	} else if v.TopicsConfig != nil {
		if err := validateGuardrailTopicsConfig(v.TopicsConfig); err != nil {
			invalidParams.AddNested("TopicsConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.TierConfig != nil {
		if err := validateGuardrailTopicsTierConfig(v.TierConfig); err != nil {
			invalidParams.AddNested("TierConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailTopicsConfig(v []types.GuardrailTopicConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailTopicsConfig"}
	for i := range v {
		if err := validateGuardrailTopicConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailTopicsTierConfig(v *types.GuardrailTopicsTierConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailTopicsTierConfig"}
	if len(v.TierName) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TierName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailWordConfig(v *types.GuardrailWordConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailWordConfig"}
	if v.Text == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Text"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailWordPolicyConfig(v *types.GuardrailWordPolicyConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailWordPolicyConfig"}
	if v.WordsConfig != nil {
		if err := validateGuardrailWordsConfig(v.WordsConfig); err != nil {
			invalidParams.AddNested("WordsConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ManagedWordListsConfig != nil {
		if err := validateGuardrailManagedWordListsConfig(v.ManagedWordListsConfig); err != nil {
			invalidParams.AddNested("ManagedWordListsConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGuardrailWordsConfig(v []types.GuardrailWordConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GuardrailWordsConfig"}
	for i := range v {
		if err := validateGuardrailWordConfig(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateHumanEvaluationConfig(v *types.HumanEvaluationConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HumanEvaluationConfig"}
	if v.HumanWorkflowConfig != nil {
		if err := validateHumanWorkflowConfig(v.HumanWorkflowConfig); err != nil {
			invalidParams.AddNested("HumanWorkflowConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.CustomMetrics != nil {
		if err := validateHumanEvaluationCustomMetrics(v.CustomMetrics); err != nil {
			invalidParams.AddNested("CustomMetrics", err.(smithy.InvalidParamsError))
		}
	}
	if v.DatasetMetricConfigs == nil {
		invalidParams.Add(smithy.NewErrParamRequired("DatasetMetricConfigs"))
	} else if v.DatasetMetricConfigs != nil {
		if err := validateEvaluationDatasetMetricConfigs(v.DatasetMetricConfigs); err != nil {
			invalidParams.AddNested("DatasetMetricConfigs", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateHumanEvaluationCustomMetric(v *types.HumanEvaluationCustomMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HumanEvaluationCustomMetric"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.RatingMethod == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RatingMethod"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateHumanEvaluationCustomMetrics(v []types.HumanEvaluationCustomMetric) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HumanEvaluationCustomMetrics"}
	for i := range v {
		if err := validateHumanEvaluationCustomMetric(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateHumanWorkflowConfig(v *types.HumanWorkflowConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HumanWorkflowConfig"}
	if v.FlowDefinitionArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FlowDefinitionArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateImplicitFilterConfiguration(v *types.ImplicitFilterConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ImplicitFilterConfiguration"}
	if v.MetadataAttributes == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MetadataAttributes"))
	} else if v.MetadataAttributes != nil {
		if err := validateMetadataAttributeSchemaList(v.MetadataAttributes); err != nil {
			invalidParams.AddNested("MetadataAttributes", err.(smithy.InvalidParamsError))
		}
	}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInvocationLogsConfig(v *types.InvocationLogsConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InvocationLogsConfig"}
	if v.InvocationLogSource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InvocationLogSource"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateKnowledgeBaseConfig(v types.KnowledgeBaseConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "KnowledgeBaseConfig"}
	switch uv := v.(type) {
	case *types.KnowledgeBaseConfigMemberRetrieveAndGenerateConfig:
		if err := validateRetrieveAndGenerateConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[retrieveAndGenerateConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.KnowledgeBaseConfigMemberRetrieveConfig:
		if err := validateRetrieveConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[retrieveConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateKnowledgeBaseRetrievalConfiguration(v *types.KnowledgeBaseRetrievalConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "KnowledgeBaseRetrievalConfiguration"}
	if v.VectorSearchConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("VectorSearchConfiguration"))
	} else if v.VectorSearchConfiguration != nil {
		if err := validateKnowledgeBaseVectorSearchConfiguration(v.VectorSearchConfiguration); err != nil {
			invalidParams.AddNested("VectorSearchConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateKnowledgeBaseRetrieveAndGenerateConfiguration(v *types.KnowledgeBaseRetrieveAndGenerateConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "KnowledgeBaseRetrieveAndGenerateConfiguration"}
	if v.KnowledgeBaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("KnowledgeBaseId"))
	}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if v.RetrievalConfiguration != nil {
		if err := validateKnowledgeBaseRetrievalConfiguration(v.RetrievalConfiguration); err != nil {
			invalidParams.AddNested("RetrievalConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.GenerationConfiguration != nil {
		if err := validateGenerationConfiguration(v.GenerationConfiguration); err != nil {
			invalidParams.AddNested("GenerationConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.OrchestrationConfiguration != nil {
		if err := validateOrchestrationConfiguration(v.OrchestrationConfiguration); err != nil {
			invalidParams.AddNested("OrchestrationConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateKnowledgeBaseVectorSearchConfiguration(v *types.KnowledgeBaseVectorSearchConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "KnowledgeBaseVectorSearchConfiguration"}
	if v.Filter != nil {
		if err := validateRetrievalFilter(v.Filter); err != nil {
			invalidParams.AddNested("Filter", err.(smithy.InvalidParamsError))
		}
	}
	if v.ImplicitFilterConfiguration != nil {
		if err := validateImplicitFilterConfiguration(v.ImplicitFilterConfiguration); err != nil {
			invalidParams.AddNested("ImplicitFilterConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.RerankingConfiguration != nil {
		if err := validateVectorSearchRerankingConfiguration(v.RerankingConfiguration); err != nil {
			invalidParams.AddNested("RerankingConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateLoggingConfig(v *types.LoggingConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "LoggingConfig"}
	if v.CloudWatchConfig != nil {
		if err := validateCloudWatchConfig(v.CloudWatchConfig); err != nil {
			invalidParams.AddNested("CloudWatchConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.S3Config != nil {
		if err := validateS3Config(v.S3Config); err != nil {
			invalidParams.AddNested("S3Config", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMetadataAttributeSchema(v *types.MetadataAttributeSchema) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MetadataAttributeSchema"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Description == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Description"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMetadataAttributeSchemaList(v []types.MetadataAttributeSchema) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MetadataAttributeSchemaList"}
	for i := range v {
		if err := validateMetadataAttributeSchema(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMetadataConfigurationForReranking(v *types.MetadataConfigurationForReranking) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MetadataConfigurationForReranking"}
	if len(v.SelectionMode) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("SelectionMode"))
	}
	if v.SelectiveModeConfiguration != nil {
		if err := validateRerankingMetadataSelectiveModeConfiguration(v.SelectiveModeConfiguration); err != nil {
			invalidParams.AddNested("SelectiveModeConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModelDataSource(v types.ModelDataSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModelDataSource"}
	switch uv := v.(type) {
	case *types.ModelDataSourceMemberS3DataSource:
		if err := validateS3DataSource(&uv.Value); err != nil {
			invalidParams.AddNested("[s3DataSource]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModelInvocationJobInputDataConfig(v types.ModelInvocationJobInputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModelInvocationJobInputDataConfig"}
	switch uv := v.(type) {
	case *types.ModelInvocationJobInputDataConfigMemberS3InputDataConfig:
		if err := validateModelInvocationJobS3InputDataConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[s3InputDataConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModelInvocationJobOutputDataConfig(v types.ModelInvocationJobOutputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModelInvocationJobOutputDataConfig"}
	switch uv := v.(type) {
	case *types.ModelInvocationJobOutputDataConfigMemberS3OutputDataConfig:
		if err := validateModelInvocationJobS3OutputDataConfig(&uv.Value); err != nil {
			invalidParams.AddNested("[s3OutputDataConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModelInvocationJobS3InputDataConfig(v *types.ModelInvocationJobS3InputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModelInvocationJobS3InputDataConfig"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModelInvocationJobS3OutputDataConfig(v *types.ModelInvocationJobS3OutputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModelInvocationJobS3OutputDataConfig"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOrchestrationConfiguration(v *types.OrchestrationConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OrchestrationConfiguration"}
	if v.QueryTransformationConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("QueryTransformationConfiguration"))
	} else if v.QueryTransformationConfiguration != nil {
		if err := validateQueryTransformationConfiguration(v.QueryTransformationConfiguration); err != nil {
			invalidParams.AddNested("QueryTransformationConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOutputDataConfig(v *types.OutputDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OutputDataConfig"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePromptRouterTargetModel(v *types.PromptRouterTargetModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PromptRouterTargetModel"}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePromptRouterTargetModels(v []types.PromptRouterTargetModel) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PromptRouterTargetModels"}
	for i := range v {
		if err := validatePromptRouterTargetModel(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateQueryTransformationConfiguration(v *types.QueryTransformationConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "QueryTransformationConfiguration"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRAGConfig(v types.RAGConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RAGConfig"}
	switch uv := v.(type) {
	case *types.RAGConfigMemberKnowledgeBaseConfig:
		if err := validateKnowledgeBaseConfig(uv.Value); err != nil {
			invalidParams.AddNested("[knowledgeBaseConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.RAGConfigMemberPrecomputedRagSourceConfig:
		if err := validateEvaluationPrecomputedRagSourceConfig(uv.Value); err != nil {
			invalidParams.AddNested("[precomputedRagSourceConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRagConfigs(v []types.RAGConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RagConfigs"}
	for i := range v {
		if err := validateRAGConfig(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRatingScale(v []types.RatingScaleItem) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RatingScale"}
	for i := range v {
		if err := validateRatingScaleItem(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRatingScaleItem(v *types.RatingScaleItem) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RatingScaleItem"}
	if v.Definition == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Definition"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRerankingMetadataSelectiveModeConfiguration(v types.RerankingMetadataSelectiveModeConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RerankingMetadataSelectiveModeConfiguration"}
	switch uv := v.(type) {
	case *types.RerankingMetadataSelectiveModeConfigurationMemberFieldsToExclude:
		if err := validateFieldsForReranking(uv.Value); err != nil {
			invalidParams.AddNested("[fieldsToExclude]", err.(smithy.InvalidParamsError))
		}

	case *types.RerankingMetadataSelectiveModeConfigurationMemberFieldsToInclude:
		if err := validateFieldsForReranking(uv.Value); err != nil {
			invalidParams.AddNested("[fieldsToInclude]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRetrievalFilter(v types.RetrievalFilter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RetrievalFilter"}
	switch uv := v.(type) {
	case *types.RetrievalFilterMemberAndAll:
		if err := validateRetrievalFilterList(uv.Value); err != nil {
			invalidParams.AddNested("[andAll]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberEquals:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[equals]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberGreaterThan:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[greaterThan]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberGreaterThanOrEquals:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[greaterThanOrEquals]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberIn:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[in]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberLessThan:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[lessThan]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberLessThanOrEquals:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[lessThanOrEquals]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberListContains:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[listContains]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberNotEquals:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[notEquals]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberNotIn:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[notIn]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberOrAll:
		if err := validateRetrievalFilterList(uv.Value); err != nil {
			invalidParams.AddNested("[orAll]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberStartsWith:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[startsWith]", err.(smithy.InvalidParamsError))
		}

	case *types.RetrievalFilterMemberStringContains:
		if err := validateFilterAttribute(&uv.Value); err != nil {
			invalidParams.AddNested("[stringContains]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRetrievalFilterList(v []types.RetrievalFilter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RetrievalFilterList"}
	for i := range v {
		if err := validateRetrievalFilter(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRetrieveAndGenerateConfiguration(v *types.RetrieveAndGenerateConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RetrieveAndGenerateConfiguration"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.KnowledgeBaseConfiguration != nil {
		if err := validateKnowledgeBaseRetrieveAndGenerateConfiguration(v.KnowledgeBaseConfiguration); err != nil {
			invalidParams.AddNested("KnowledgeBaseConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.ExternalSourcesConfiguration != nil {
		if err := validateExternalSourcesRetrieveAndGenerateConfiguration(v.ExternalSourcesConfiguration); err != nil {
			invalidParams.AddNested("ExternalSourcesConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRetrieveConfig(v *types.RetrieveConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RetrieveConfig"}
	if v.KnowledgeBaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("KnowledgeBaseId"))
	}
	if v.KnowledgeBaseRetrievalConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("KnowledgeBaseRetrievalConfiguration"))
	} else if v.KnowledgeBaseRetrievalConfiguration != nil {
		if err := validateKnowledgeBaseRetrievalConfiguration(v.KnowledgeBaseRetrievalConfiguration); err != nil {
			invalidParams.AddNested("KnowledgeBaseRetrievalConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRoutingCriteria(v *types.RoutingCriteria) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RoutingCriteria"}
	if v.ResponseQualityDifference == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResponseQualityDifference"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateS3Config(v *types.S3Config) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "S3Config"}
	if v.BucketName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BucketName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateS3DataSource(v *types.S3DataSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "S3DataSource"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateS3ObjectDoc(v *types.S3ObjectDoc) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "S3ObjectDoc"}
	if v.Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSageMakerEndpoint(v *types.SageMakerEndpoint) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SageMakerEndpoint"}
	if v.InitialInstanceCount == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InitialInstanceCount"))
	}
	if v.InstanceType == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceType"))
	}
	if v.ExecutionRole == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExecutionRole"))
	}
	if v.Vpc != nil {
		if err := validateVpcConfig(v.Vpc); err != nil {
			invalidParams.AddNested("Vpc", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTag(v *types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Tag"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTagList(v []types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagList"}
	for i := range v {
		if err := validateTag(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTeacherModelConfig(v *types.TeacherModelConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TeacherModelConfig"}
	if v.TeacherModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TeacherModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTrainingDataConfig(v *types.TrainingDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TrainingDataConfig"}
	if v.InvocationLogsConfig != nil {
		if err := validateInvocationLogsConfig(v.InvocationLogsConfig); err != nil {
			invalidParams.AddNested("InvocationLogsConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateValidationDataConfig(v *types.ValidationDataConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ValidationDataConfig"}
	if v.Validators == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Validators"))
	} else if v.Validators != nil {
		if err := validateValidators(v.Validators); err != nil {
			invalidParams.AddNested("Validators", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateValidator(v *types.Validator) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Validator"}
	if v.S3Uri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Uri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateValidators(v []types.Validator) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Validators"}
	for i := range v {
		if err := validateValidator(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateVectorSearchBedrockRerankingConfiguration(v *types.VectorSearchBedrockRerankingConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VectorSearchBedrockRerankingConfiguration"}
	if v.ModelConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelConfiguration"))
	} else if v.ModelConfiguration != nil {
		if err := validateVectorSearchBedrockRerankingModelConfiguration(v.ModelConfiguration); err != nil {
			invalidParams.AddNested("ModelConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.MetadataConfiguration != nil {
		if err := validateMetadataConfigurationForReranking(v.MetadataConfiguration); err != nil {
			invalidParams.AddNested("MetadataConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateVectorSearchBedrockRerankingModelConfiguration(v *types.VectorSearchBedrockRerankingModelConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VectorSearchBedrockRerankingModelConfiguration"}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateVectorSearchRerankingConfiguration(v *types.VectorSearchRerankingConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VectorSearchRerankingConfiguration"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.BedrockRerankingConfiguration != nil {
		if err := validateVectorSearchBedrockRerankingConfiguration(v.BedrockRerankingConfiguration); err != nil {
			invalidParams.AddNested("BedrockRerankingConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateVpcConfig(v *types.VpcConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VpcConfig"}
	if v.SubnetIds == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SubnetIds"))
	}
	if v.SecurityGroupIds == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SecurityGroupIds"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpBatchDeleteEvaluationJobInput(v *BatchDeleteEvaluationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BatchDeleteEvaluationJobInput"}
	if v.JobIdentifiers == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifiers"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCancelAutomatedReasoningPolicyBuildWorkflowInput(v *CancelAutomatedReasoningPolicyBuildWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CancelAutomatedReasoningPolicyBuildWorkflowInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAutomatedReasoningPolicyInput(v *CreateAutomatedReasoningPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAutomatedReasoningPolicyInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.PolicyDefinition != nil {
		if err := validateAutomatedReasoningPolicyDefinition(v.PolicyDefinition); err != nil {
			invalidParams.AddNested("PolicyDefinition", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAutomatedReasoningPolicyTestCaseInput(v *CreateAutomatedReasoningPolicyTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAutomatedReasoningPolicyTestCaseInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.GuardContent == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardContent"))
	}
	if len(v.ExpectedAggregatedFindingsResult) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ExpectedAggregatedFindingsResult"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAutomatedReasoningPolicyVersionInput(v *CreateAutomatedReasoningPolicyVersionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAutomatedReasoningPolicyVersionInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.LastUpdatedDefinitionHash == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LastUpdatedDefinitionHash"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateCustomModelDeploymentInput(v *CreateCustomModelDeploymentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateCustomModelDeploymentInput"}
	if v.ModelDeploymentName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelDeploymentName"))
	}
	if v.ModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelArn"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateCustomModelInput(v *CreateCustomModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateCustomModelInput"}
	if v.ModelName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelName"))
	}
	if v.ModelSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelSourceConfig"))
	} else if v.ModelSourceConfig != nil {
		if err := validateModelDataSource(v.ModelSourceConfig); err != nil {
			invalidParams.AddNested("ModelSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ModelTags != nil {
		if err := validateTagList(v.ModelTags); err != nil {
			invalidParams.AddNested("ModelTags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateEvaluationJobInput(v *CreateEvaluationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateEvaluationJobInput"}
	if v.JobName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobName"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.JobTags != nil {
		if err := validateTagList(v.JobTags); err != nil {
			invalidParams.AddNested("JobTags", err.(smithy.InvalidParamsError))
		}
	}
	if v.EvaluationConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EvaluationConfig"))
	} else if v.EvaluationConfig != nil {
		if err := validateEvaluationConfig(v.EvaluationConfig); err != nil {
			invalidParams.AddNested("EvaluationConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.InferenceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InferenceConfig"))
	} else if v.InferenceConfig != nil {
		if err := validateEvaluationInferenceConfig(v.InferenceConfig); err != nil {
			invalidParams.AddNested("InferenceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputDataConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputDataConfig"))
	} else if v.OutputDataConfig != nil {
		if err := validateEvaluationOutputDataConfig(v.OutputDataConfig); err != nil {
			invalidParams.AddNested("OutputDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateFoundationModelAgreementInput(v *CreateFoundationModelAgreementInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateFoundationModelAgreementInput"}
	if v.OfferToken == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OfferToken"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateGuardrailInput(v *CreateGuardrailInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateGuardrailInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.TopicPolicyConfig != nil {
		if err := validateGuardrailTopicPolicyConfig(v.TopicPolicyConfig); err != nil {
			invalidParams.AddNested("TopicPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ContentPolicyConfig != nil {
		if err := validateGuardrailContentPolicyConfig(v.ContentPolicyConfig); err != nil {
			invalidParams.AddNested("ContentPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.WordPolicyConfig != nil {
		if err := validateGuardrailWordPolicyConfig(v.WordPolicyConfig); err != nil {
			invalidParams.AddNested("WordPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.SensitiveInformationPolicyConfig != nil {
		if err := validateGuardrailSensitiveInformationPolicyConfig(v.SensitiveInformationPolicyConfig); err != nil {
			invalidParams.AddNested("SensitiveInformationPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ContextualGroundingPolicyConfig != nil {
		if err := validateGuardrailContextualGroundingPolicyConfig(v.ContextualGroundingPolicyConfig); err != nil {
			invalidParams.AddNested("ContextualGroundingPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.AutomatedReasoningPolicyConfig != nil {
		if err := validateGuardrailAutomatedReasoningPolicyConfig(v.AutomatedReasoningPolicyConfig); err != nil {
			invalidParams.AddNested("AutomatedReasoningPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.CrossRegionConfig != nil {
		if err := validateGuardrailCrossRegionConfig(v.CrossRegionConfig); err != nil {
			invalidParams.AddNested("CrossRegionConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.BlockedInputMessaging == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BlockedInputMessaging"))
	}
	if v.BlockedOutputsMessaging == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BlockedOutputsMessaging"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateGuardrailVersionInput(v *CreateGuardrailVersionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateGuardrailVersionInput"}
	if v.GuardrailIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateInferenceProfileInput(v *CreateInferenceProfileInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateInferenceProfileInput"}
	if v.InferenceProfileName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InferenceProfileName"))
	}
	if v.ModelSource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelSource"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateMarketplaceModelEndpointInput(v *CreateMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateMarketplaceModelEndpointInput"}
	if v.ModelSourceIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelSourceIdentifier"))
	}
	if v.EndpointConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointConfig"))
	} else if v.EndpointConfig != nil {
		if err := validateEndpointConfig(v.EndpointConfig); err != nil {
			invalidParams.AddNested("EndpointConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.EndpointName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointName"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateModelCopyJobInput(v *CreateModelCopyJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateModelCopyJobInput"}
	if v.SourceModelArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceModelArn"))
	}
	if v.TargetModelName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetModelName"))
	}
	if v.TargetModelTags != nil {
		if err := validateTagList(v.TargetModelTags); err != nil {
			invalidParams.AddNested("TargetModelTags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateModelCustomizationJobInput(v *CreateModelCustomizationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateModelCustomizationJobInput"}
	if v.JobName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobName"))
	}
	if v.CustomModelName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomModelName"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.BaseModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BaseModelIdentifier"))
	}
	if v.JobTags != nil {
		if err := validateTagList(v.JobTags); err != nil {
			invalidParams.AddNested("JobTags", err.(smithy.InvalidParamsError))
		}
	}
	if v.CustomModelTags != nil {
		if err := validateTagList(v.CustomModelTags); err != nil {
			invalidParams.AddNested("CustomModelTags", err.(smithy.InvalidParamsError))
		}
	}
	if v.TrainingDataConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrainingDataConfig"))
	} else if v.TrainingDataConfig != nil {
		if err := validateTrainingDataConfig(v.TrainingDataConfig); err != nil {
			invalidParams.AddNested("TrainingDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ValidationDataConfig != nil {
		if err := validateValidationDataConfig(v.ValidationDataConfig); err != nil {
			invalidParams.AddNested("ValidationDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputDataConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputDataConfig"))
	} else if v.OutputDataConfig != nil {
		if err := validateOutputDataConfig(v.OutputDataConfig); err != nil {
			invalidParams.AddNested("OutputDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.VpcConfig != nil {
		if err := validateVpcConfig(v.VpcConfig); err != nil {
			invalidParams.AddNested("VpcConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.CustomizationConfig != nil {
		if err := validateCustomizationConfig(v.CustomizationConfig); err != nil {
			invalidParams.AddNested("CustomizationConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateModelImportJobInput(v *CreateModelImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateModelImportJobInput"}
	if v.JobName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobName"))
	}
	if v.ImportedModelName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ImportedModelName"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.ModelDataSource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelDataSource"))
	} else if v.ModelDataSource != nil {
		if err := validateModelDataSource(v.ModelDataSource); err != nil {
			invalidParams.AddNested("ModelDataSource", err.(smithy.InvalidParamsError))
		}
	}
	if v.JobTags != nil {
		if err := validateTagList(v.JobTags); err != nil {
			invalidParams.AddNested("JobTags", err.(smithy.InvalidParamsError))
		}
	}
	if v.ImportedModelTags != nil {
		if err := validateTagList(v.ImportedModelTags); err != nil {
			invalidParams.AddNested("ImportedModelTags", err.(smithy.InvalidParamsError))
		}
	}
	if v.VpcConfig != nil {
		if err := validateVpcConfig(v.VpcConfig); err != nil {
			invalidParams.AddNested("VpcConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateModelInvocationJobInput(v *CreateModelInvocationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateModelInvocationJobInput"}
	if v.JobName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobName"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if v.InputDataConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputDataConfig"))
	} else if v.InputDataConfig != nil {
		if err := validateModelInvocationJobInputDataConfig(v.InputDataConfig); err != nil {
			invalidParams.AddNested("InputDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputDataConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputDataConfig"))
	} else if v.OutputDataConfig != nil {
		if err := validateModelInvocationJobOutputDataConfig(v.OutputDataConfig); err != nil {
			invalidParams.AddNested("OutputDataConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.VpcConfig != nil {
		if err := validateVpcConfig(v.VpcConfig); err != nil {
			invalidParams.AddNested("VpcConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreatePromptRouterInput(v *CreatePromptRouterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreatePromptRouterInput"}
	if v.PromptRouterName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PromptRouterName"))
	}
	if v.Models == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Models"))
	} else if v.Models != nil {
		if err := validatePromptRouterTargetModels(v.Models); err != nil {
			invalidParams.AddNested("Models", err.(smithy.InvalidParamsError))
		}
	}
	if v.RoutingCriteria == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoutingCriteria"))
	} else if v.RoutingCriteria != nil {
		if err := validateRoutingCriteria(v.RoutingCriteria); err != nil {
			invalidParams.AddNested("RoutingCriteria", err.(smithy.InvalidParamsError))
		}
	}
	if v.FallbackModel == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FallbackModel"))
	} else if v.FallbackModel != nil {
		if err := validatePromptRouterTargetModel(v.FallbackModel); err != nil {
			invalidParams.AddNested("FallbackModel", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateProvisionedModelThroughputInput(v *CreateProvisionedModelThroughputInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateProvisionedModelThroughputInput"}
	if v.ModelUnits == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelUnits"))
	}
	if v.ProvisionedModelName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProvisionedModelName"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAutomatedReasoningPolicyBuildWorkflowInput(v *DeleteAutomatedReasoningPolicyBuildWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAutomatedReasoningPolicyBuildWorkflowInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if v.LastUpdatedAt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LastUpdatedAt"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAutomatedReasoningPolicyInput(v *DeleteAutomatedReasoningPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAutomatedReasoningPolicyInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAutomatedReasoningPolicyTestCaseInput(v *DeleteAutomatedReasoningPolicyTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAutomatedReasoningPolicyTestCaseInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if v.LastUpdatedAt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LastUpdatedAt"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteCustomModelDeploymentInput(v *DeleteCustomModelDeploymentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteCustomModelDeploymentInput"}
	if v.CustomModelDeploymentIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomModelDeploymentIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteCustomModelInput(v *DeleteCustomModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteCustomModelInput"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteFoundationModelAgreementInput(v *DeleteFoundationModelAgreementInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteFoundationModelAgreementInput"}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteGuardrailInput(v *DeleteGuardrailInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteGuardrailInput"}
	if v.GuardrailIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteImportedModelInput(v *DeleteImportedModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteImportedModelInput"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteInferenceProfileInput(v *DeleteInferenceProfileInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteInferenceProfileInput"}
	if v.InferenceProfileIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InferenceProfileIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteMarketplaceModelEndpointInput(v *DeleteMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteMarketplaceModelEndpointInput"}
	if v.EndpointArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeletePromptRouterInput(v *DeletePromptRouterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeletePromptRouterInput"}
	if v.PromptRouterArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PromptRouterArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteProvisionedModelThroughputInput(v *DeleteProvisionedModelThroughputInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteProvisionedModelThroughputInput"}
	if v.ProvisionedModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProvisionedModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeregisterMarketplaceModelEndpointInput(v *DeregisterMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeregisterMarketplaceModelEndpointInput"}
	if v.EndpointArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpExportAutomatedReasoningPolicyVersionInput(v *ExportAutomatedReasoningPolicyVersionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ExportAutomatedReasoningPolicyVersionInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyAnnotationsInput(v *GetAutomatedReasoningPolicyAnnotationsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyAnnotationsInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyBuildWorkflowInput(v *GetAutomatedReasoningPolicyBuildWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyBuildWorkflowInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyBuildWorkflowResultAssetsInput(v *GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if len(v.AssetType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AssetType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyInput(v *GetAutomatedReasoningPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyNextScenarioInput(v *GetAutomatedReasoningPolicyNextScenarioInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyNextScenarioInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyTestCaseInput(v *GetAutomatedReasoningPolicyTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyTestCaseInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAutomatedReasoningPolicyTestResultInput(v *GetAutomatedReasoningPolicyTestResultInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAutomatedReasoningPolicyTestResultInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetCustomModelDeploymentInput(v *GetCustomModelDeploymentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetCustomModelDeploymentInput"}
	if v.CustomModelDeploymentIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomModelDeploymentIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetCustomModelInput(v *GetCustomModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetCustomModelInput"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetEvaluationJobInput(v *GetEvaluationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetEvaluationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetFoundationModelAvailabilityInput(v *GetFoundationModelAvailabilityInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetFoundationModelAvailabilityInput"}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetFoundationModelInput(v *GetFoundationModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetFoundationModelInput"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetGuardrailInput(v *GetGuardrailInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetGuardrailInput"}
	if v.GuardrailIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetImportedModelInput(v *GetImportedModelInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetImportedModelInput"}
	if v.ModelIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetInferenceProfileInput(v *GetInferenceProfileInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetInferenceProfileInput"}
	if v.InferenceProfileIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InferenceProfileIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMarketplaceModelEndpointInput(v *GetMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMarketplaceModelEndpointInput"}
	if v.EndpointArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetModelCopyJobInput(v *GetModelCopyJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetModelCopyJobInput"}
	if v.JobArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetModelCustomizationJobInput(v *GetModelCustomizationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetModelCustomizationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetModelImportJobInput(v *GetModelImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetModelImportJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetModelInvocationJobInput(v *GetModelInvocationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetModelInvocationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetPromptRouterInput(v *GetPromptRouterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetPromptRouterInput"}
	if v.PromptRouterArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PromptRouterArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetProvisionedModelThroughputInput(v *GetProvisionedModelThroughputInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetProvisionedModelThroughputInput"}
	if v.ProvisionedModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProvisionedModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAutomatedReasoningPolicyBuildWorkflowsInput(v *ListAutomatedReasoningPolicyBuildWorkflowsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAutomatedReasoningPolicyBuildWorkflowsInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAutomatedReasoningPolicyTestCasesInput(v *ListAutomatedReasoningPolicyTestCasesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAutomatedReasoningPolicyTestCasesInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAutomatedReasoningPolicyTestResultsInput(v *ListAutomatedReasoningPolicyTestResultsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAutomatedReasoningPolicyTestResultsInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListFoundationModelAgreementOffersInput(v *ListFoundationModelAgreementOffersInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListFoundationModelAgreementOffersInput"}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceARN"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutModelInvocationLoggingConfigurationInput(v *PutModelInvocationLoggingConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutModelInvocationLoggingConfigurationInput"}
	if v.LoggingConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LoggingConfig"))
	} else if v.LoggingConfig != nil {
		if err := validateLoggingConfig(v.LoggingConfig); err != nil {
			invalidParams.AddNested("LoggingConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutUseCaseForModelAccessInput(v *PutUseCaseForModelAccessInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutUseCaseForModelAccessInput"}
	if v.FormData == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FormData"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpRegisterMarketplaceModelEndpointInput(v *RegisterMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RegisterMarketplaceModelEndpointInput"}
	if v.EndpointIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointIdentifier"))
	}
	if v.ModelSourceIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelSourceIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartAutomatedReasoningPolicyBuildWorkflowInput(v *StartAutomatedReasoningPolicyBuildWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartAutomatedReasoningPolicyBuildWorkflowInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if len(v.BuildWorkflowType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowType"))
	}
	if v.SourceContent == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceContent"))
	} else if v.SourceContent != nil {
		if err := validateAutomatedReasoningPolicyBuildWorkflowSource(v.SourceContent); err != nil {
			invalidParams.AddNested("SourceContent", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartAutomatedReasoningPolicyTestWorkflowInput(v *StartAutomatedReasoningPolicyTestWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartAutomatedReasoningPolicyTestWorkflowInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopEvaluationJobInput(v *StopEvaluationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopEvaluationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopModelCustomizationJobInput(v *StopModelCustomizationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopModelCustomizationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopModelInvocationJobInput(v *StopModelInvocationJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopModelInvocationJobInput"}
	if v.JobIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceARN"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	} else if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceARN"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateAutomatedReasoningPolicyAnnotationsInput(v *UpdateAutomatedReasoningPolicyAnnotationsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateAutomatedReasoningPolicyAnnotationsInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.BuildWorkflowId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BuildWorkflowId"))
	}
	if v.Annotations == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Annotations"))
	} else if v.Annotations != nil {
		if err := validateAutomatedReasoningPolicyAnnotationList(v.Annotations); err != nil {
			invalidParams.AddNested("Annotations", err.(smithy.InvalidParamsError))
		}
	}
	if v.LastUpdatedAnnotationSetHash == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LastUpdatedAnnotationSetHash"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateAutomatedReasoningPolicyInput(v *UpdateAutomatedReasoningPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateAutomatedReasoningPolicyInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.PolicyDefinition == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyDefinition"))
	} else if v.PolicyDefinition != nil {
		if err := validateAutomatedReasoningPolicyDefinition(v.PolicyDefinition); err != nil {
			invalidParams.AddNested("PolicyDefinition", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateAutomatedReasoningPolicyTestCaseInput(v *UpdateAutomatedReasoningPolicyTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateAutomatedReasoningPolicyTestCaseInput"}
	if v.PolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyArn"))
	}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if v.GuardContent == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardContent"))
	}
	if v.LastUpdatedAt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LastUpdatedAt"))
	}
	if len(v.ExpectedAggregatedFindingsResult) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ExpectedAggregatedFindingsResult"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateGuardrailInput(v *UpdateGuardrailInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateGuardrailInput"}
	if v.GuardrailIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GuardrailIdentifier"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.TopicPolicyConfig != nil {
		if err := validateGuardrailTopicPolicyConfig(v.TopicPolicyConfig); err != nil {
			invalidParams.AddNested("TopicPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ContentPolicyConfig != nil {
		if err := validateGuardrailContentPolicyConfig(v.ContentPolicyConfig); err != nil {
			invalidParams.AddNested("ContentPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.WordPolicyConfig != nil {
		if err := validateGuardrailWordPolicyConfig(v.WordPolicyConfig); err != nil {
			invalidParams.AddNested("WordPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.SensitiveInformationPolicyConfig != nil {
		if err := validateGuardrailSensitiveInformationPolicyConfig(v.SensitiveInformationPolicyConfig); err != nil {
			invalidParams.AddNested("SensitiveInformationPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ContextualGroundingPolicyConfig != nil {
		if err := validateGuardrailContextualGroundingPolicyConfig(v.ContextualGroundingPolicyConfig); err != nil {
			invalidParams.AddNested("ContextualGroundingPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.AutomatedReasoningPolicyConfig != nil {
		if err := validateGuardrailAutomatedReasoningPolicyConfig(v.AutomatedReasoningPolicyConfig); err != nil {
			invalidParams.AddNested("AutomatedReasoningPolicyConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.CrossRegionConfig != nil {
		if err := validateGuardrailCrossRegionConfig(v.CrossRegionConfig); err != nil {
			invalidParams.AddNested("CrossRegionConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.BlockedInputMessaging == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BlockedInputMessaging"))
	}
	if v.BlockedOutputsMessaging == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BlockedOutputsMessaging"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateMarketplaceModelEndpointInput(v *UpdateMarketplaceModelEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateMarketplaceModelEndpointInput"}
	if v.EndpointArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointArn"))
	}
	if v.EndpointConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointConfig"))
	} else if v.EndpointConfig != nil {
		if err := validateEndpointConfig(v.EndpointConfig); err != nil {
			invalidParams.AddNested("EndpointConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateProvisionedModelThroughputInput(v *UpdateProvisionedModelThroughputInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateProvisionedModelThroughputInput"}
	if v.ProvisionedModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProvisionedModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
